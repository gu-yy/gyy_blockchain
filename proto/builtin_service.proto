// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto2";

package blockchain;

option cc_generic_services = true;

// The greeting service definition.
service Builtin {
  // Sends a greeting
  // rpc SayHello (HelloRequest) returns (HelloReply) {}
  // rpc InstallSmartContract (InstallSmartContractRequest) returns (InstallSmartContractReply) {}
  rpc InvokeSmartContract (InvokeSmartContractRequest) returns (InvokeSmartContractResponse) {}
}
message InvokeSmartContractRequest {
  message SmartContractParams {
    repeated string params = 1;
  }
  required string smart_contract_name = 1;
  required SmartContractParams params = 2;
  required float version = 3;
}

message InvokeSmartContractResponse {
  message SmartContractRetValue {
    repeated string ret_values = 1;
  }
  enum InvokeStatus {
    SUCCESS = 1;
    FAIL = 2;
  }
  required string smart_contract_name = 1;
  optional SmartContractRetValue ret_values = 2;
  required float version = 3;
  required InvokeStatus status = 4; 
}

// The request message containing the user's name.
// message InstallSmartContractRequest {
//   required string name = 1;
//   required bytes content = 2;
//   required bytes check_code = 3;
//   required float version = 4;
// }

// The response message containing the greetings
// enum InstallSmartContractCode {
//   SUCCESS = 1;
//   FAIL = 2;
// }
// message InstallSmartContractReply {
//   required InstallSmartContractCode code=1;
//   required string message = 2;
// }